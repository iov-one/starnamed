syntax = "proto3";
package starnamed.x.starname.v1beta1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "iov/starname/v1beta1/types.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

option go_package = "github.com/iov-one/starnamed/x/starname/types";
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.equal_all) = false;

// Query defines the gRPC querier service.
service Query {
    // Domain gets a starname's domain info.
    rpc Domain (QueryDomainRequest) returns (QueryDomainResponse) {
        option (google.api.http).get = "/starname/v1beta1/domain/{name}";
    }

    // DomainAccounts gets accounts associated with a given domain.
    rpc DomainAccounts (QueryDomainAccountsRequest) returns (QueryDomainAccountsResponse) {
        option (google.api.http).get = "/starname/v1beta1/accounts/domain/{domain}";
    }

    // Starname gets all the information associated with a starname.
    rpc Starname (QueryStarnameRequest) returns (QueryStarnameResponse) {
        option (google.api.http).get = "/starname/v1beta1/account/{starname}";
    }

    // OwnerAccounts gets accounts associated with a given owner.
    rpc OwnerAccounts (QueryOwnerAccountsRequest) returns (QueryOwnerAccountsResponse) {
        option (google.api.http).get = "/starname/v1beta1/accounts/owner/{owner}";
    }

    // OwnerDomains gets domains associated with a given owner.
    rpc OwnerDomains (QueryOwnerDomainsRequest) returns (QueryOwnerDomainsResponse) {
        option (google.api.http).get = "/starname/v1beta1/domains/owner/{owner}";
    }

    // ResourceAccounts gets accounts associated with a given resource.
    rpc ResourceAccounts (QueryResourceAccountsRequest) returns (QueryResourceAccountsResponse) {
        option (google.api.http).get = "/starname/v1beta1/accounts/resource/{uri}/{resource}";
    }

    // BrokerAccounts gets accounts associated with a given broker.
    rpc BrokerAccounts (QueryBrokerAccountsRequest) returns (QueryBrokerAccountsResponse) {
        option (google.api.http).get = "/starname/v1beta1/accounts/broker/{broker}";
    }

    // BrokerDomains gets domains associated with a given broker.
    rpc BrokerDomains (QueryBrokerDomainsRequest) returns (QueryBrokerDomainsResponse) {
        option (google.api.http).get = "/starname/v1beta1/domains/broker/{broker}";
    }

    // Yield estimates and retrieves the annualized yield for delegators
    rpc Yield (QueryYieldRequest) returns (QueryYieldResponse) {
        option (google.api.http).get = "/starname/v1beta1/yield";
    }
}

 // QueryDomainRequest is the request type for the Query/Domain RPC method.
message QueryDomainRequest {
    // Name is the name of the domain.
    string name = 1 [
        (gogoproto.moretags) = "yaml:\"name\""
    ];
}

// QueryDomainResponse is the response type for the Query/Domain RPC method.
message QueryDomainResponse {
    // Domain is the information associated with the domain.
    Domain domain = 1 [
        (gogoproto.moretags) = "yaml:\"domain\""
    ];
}

// QueryDomainAccountsRequest is the request type for the Query/DomainAccounts RPC method.
message QueryDomainAccountsRequest {
    // Domain is the name of the domain.
    string domain = 1 [
        (gogoproto.moretags) = "yaml:\"domain\""
    ];
    cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryDomainAccountsResponse is the response type for the Query/DomainAccounts RPC method.
message QueryDomainAccountsResponse {
    // Accounts is the accounts associated with the domain.
    repeated Account accounts = 1 [
        (gogoproto.moretags) = "yaml:\"accounts\""
    ];
    cosmos.base.query.v1beta1.PageResponse page = 2;
}

// QueryStarnameRequest is the request type for the Query/Starname RPC method.
message QueryStarnameRequest {
    // Starname is the of the form account*domain.
    string starname = 1 [
        (gogoproto.moretags) = "yaml:\"starname\""
    ];
}

// QueryStarnameResponse is the response type for the Query/Starname RPC method.
message QueryStarnameResponse {
    // Account is the information associated with the starname.
     Account account = 1 [
        (gogoproto.moretags) = "yaml:\"account\""
    ];
}

// QueryOwnerAccountsRequest is the request type for the Query/OwnerAccounts RPC method.
message QueryOwnerAccountsRequest {
    // Owner is the owner of accounts.
    string owner = 1 [
        (gogoproto.moretags) = "yaml:\"owner\""
    ];
    cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryOwnerAccountsResponse is the response type for the Query/OwnerAccounts RPC method.
message QueryOwnerAccountsResponse {
    // Accounts is the accounts associated with owner.
    repeated Account accounts = 1 [
        (gogoproto.moretags) = "yaml:\"accounts\""
    ];
    cosmos.base.query.v1beta1.PageResponse page = 2;
}

// QueryOwnerDomainsRequest is the request type for the Query/OwnerDomains RPC method.
message QueryOwnerDomainsRequest {
    // Owner is the owner of accounts.
    string owner = 1 [
        (gogoproto.moretags) = "yaml:\"owner\""
    ];
    cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryOwnerDomainsResponse is the response type for the Query/OwnerDomains RPC method.
message QueryOwnerDomainsResponse {
    // Accounts is the accounts associated with owner.
    repeated Domain domains = 1 [
        (gogoproto.moretags) = "yaml:\"domains\""
    ];
    cosmos.base.query.v1beta1.PageResponse page = 2;
}

// QueryResourceAccountsRequest is the request type for the Query/ResourceAccounts RPC method.
message QueryResourceAccountsRequest {
    // Uri is the uri of the resource. query.pb.gw.to doesn't respect gogoproto.customname, so we're stuck with Uri.
    string uri = 1 [
        (gogoproto.moretags) = "yaml:\"uri\""
    ];
    // Resource is the resource of interest.
    string resource = 2 [
        (gogoproto.moretags) = "yaml:\"resource\""
    ];
    cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

// QueryResourceAccountsResponse is the response type for the Query/ResourceAccounts RPC method.
message QueryResourceAccountsResponse {
    // Accounts are the accounts associated with the resource.
    repeated Account accounts = 1 [
        (gogoproto.moretags) = "yaml:\"accounts\""
    ];
    cosmos.base.query.v1beta1.PageResponse page = 2;
}

// QueryBrokerAccountsRequest is the request type for the Query/BrokerAccounts RPC method.
message QueryBrokerAccountsRequest {
    // Broker is the broker of accounts.
    string broker = 1 [
        (gogoproto.moretags) = "yaml:\"broker\""
    ];
    cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryBrokerAccountsResponse is the response type for the Query/BrokerAccounts RPC method.
message QueryBrokerAccountsResponse {
    // Accounts is the accounts associated with broker.
    repeated Account accounts = 1 [
        (gogoproto.moretags) = "yaml:\"accounts\""
    ];
    cosmos.base.query.v1beta1.PageResponse page = 2;
}

// QueryBrokerDomainsRequest is the request type for the Query/BrokerDomains RPC method.
message QueryBrokerDomainsRequest {
    // Broker is the broker of accounts.
    string broker = 1 [
        (gogoproto.moretags) = "yaml:\"broker\""
    ];
    cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryBrokerDomainsResponse is the response type for the Query/BrokerDomains RPC method.
message QueryBrokerDomainsResponse {
    // Accounts is the accounts associated with broker.
    repeated Domain domains = 1 [
        (gogoproto.moretags) = "yaml:\"domains\""
    ];
    cosmos.base.query.v1beta1.PageResponse page = 2;
}

// QueryYieldRequest is the request type for the Query/Yield RPC method.
message QueryYieldRequest {
}

// QueryYieldResponse is the response type for the Query/Yield RPC method.
message QueryYieldResponse {
   string yield = 1 [
       (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
       (gogoproto.nullable) = false
   ];
}
