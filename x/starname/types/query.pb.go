// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/starname/types/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryDomainRequest is the request type for the Query/Domain RPC method.
type QueryDomainRequest struct {
	// Name is the name of the domain.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
}

func (m *QueryDomainRequest) Reset()         { *m = QueryDomainRequest{} }
func (m *QueryDomainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDomainRequest) ProtoMessage()    {}
func (*QueryDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da7e34c330677649, []int{0}
}
func (m *QueryDomainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDomainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDomainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDomainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDomainRequest.Merge(m, src)
}
func (m *QueryDomainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDomainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDomainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDomainRequest proto.InternalMessageInfo

// QueryDomainResponse is the response type for the Query/Domain RPC method.
type QueryDomainResponse struct {
	// Domain is the information associated with the domain.
	Domain *Domain `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty" yaml:"domain"`
}

func (m *QueryDomainResponse) Reset()         { *m = QueryDomainResponse{} }
func (m *QueryDomainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDomainResponse) ProtoMessage()    {}
func (*QueryDomainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_da7e34c330677649, []int{1}
}
func (m *QueryDomainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDomainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDomainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDomainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDomainResponse.Merge(m, src)
}
func (m *QueryDomainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDomainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDomainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDomainResponse proto.InternalMessageInfo

// QueryDomainAccountsRequest is the request type for the Query/DomainAccounts RPC method.
type QueryDomainAccountsRequest struct {
	// Domain is the name of the domain.
	Domain     string             `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty" yaml:"domain"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDomainAccountsRequest) Reset()         { *m = QueryDomainAccountsRequest{} }
func (m *QueryDomainAccountsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDomainAccountsRequest) ProtoMessage()    {}
func (*QueryDomainAccountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da7e34c330677649, []int{2}
}
func (m *QueryDomainAccountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDomainAccountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDomainAccountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDomainAccountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDomainAccountsRequest.Merge(m, src)
}
func (m *QueryDomainAccountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDomainAccountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDomainAccountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDomainAccountsRequest proto.InternalMessageInfo

// QueryDomainAccountsResponse is the response type for the Query/DomainAccounts RPC method.
type QueryDomainAccountsResponse struct {
	// Accounts is the accounts associated with the domain.
	Accounts []*Account          `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty" yaml:"accounts"`
	Page     *query.PageResponse `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (m *QueryDomainAccountsResponse) Reset()         { *m = QueryDomainAccountsResponse{} }
func (m *QueryDomainAccountsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDomainAccountsResponse) ProtoMessage()    {}
func (*QueryDomainAccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_da7e34c330677649, []int{3}
}
func (m *QueryDomainAccountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDomainAccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDomainAccountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDomainAccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDomainAccountsResponse.Merge(m, src)
}
func (m *QueryDomainAccountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDomainAccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDomainAccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDomainAccountsResponse proto.InternalMessageInfo

// QueryStarnameRequest is the request type for the Query/Starname RPC method.
type QueryStarnameRequest struct {
	// Starname is the of the form account*domain.
	Starname string `protobuf:"bytes,1,opt,name=starname,proto3" json:"starname,omitempty" yaml:"starname"`
}

func (m *QueryStarnameRequest) Reset()         { *m = QueryStarnameRequest{} }
func (m *QueryStarnameRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStarnameRequest) ProtoMessage()    {}
func (*QueryStarnameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da7e34c330677649, []int{4}
}
func (m *QueryStarnameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStarnameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStarnameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStarnameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStarnameRequest.Merge(m, src)
}
func (m *QueryStarnameRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStarnameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStarnameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStarnameRequest proto.InternalMessageInfo

// QueryStarnameResponse is the response type for the Query/Starname RPC method.
type QueryStarnameResponse struct {
	// Account is the information associated with the starname.
	Account *Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty" yaml:"account"`
}

func (m *QueryStarnameResponse) Reset()         { *m = QueryStarnameResponse{} }
func (m *QueryStarnameResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStarnameResponse) ProtoMessage()    {}
func (*QueryStarnameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_da7e34c330677649, []int{5}
}
func (m *QueryStarnameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStarnameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStarnameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStarnameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStarnameResponse.Merge(m, src)
}
func (m *QueryStarnameResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStarnameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStarnameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStarnameResponse proto.InternalMessageInfo

// QueryOwnerAccountsRequest is the request type for the Query/OwnerAccounts RPC method.
type QueryOwnerAccountsRequest struct {
	// Owner is the owner of accounts.
	Owner      string             `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOwnerAccountsRequest) Reset()         { *m = QueryOwnerAccountsRequest{} }
func (m *QueryOwnerAccountsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOwnerAccountsRequest) ProtoMessage()    {}
func (*QueryOwnerAccountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da7e34c330677649, []int{6}
}
func (m *QueryOwnerAccountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwnerAccountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwnerAccountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwnerAccountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwnerAccountsRequest.Merge(m, src)
}
func (m *QueryOwnerAccountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwnerAccountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwnerAccountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwnerAccountsRequest proto.InternalMessageInfo

// QueryOwnerAccountsResponse is the response type for the Query/OwnerAccounts RPC method.
type QueryOwnerAccountsResponse struct {
	// Accounts is the accounts associated with owner.
	Accounts []*Account          `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty" yaml:"accounts"`
	Page     *query.PageResponse `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (m *QueryOwnerAccountsResponse) Reset()         { *m = QueryOwnerAccountsResponse{} }
func (m *QueryOwnerAccountsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOwnerAccountsResponse) ProtoMessage()    {}
func (*QueryOwnerAccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_da7e34c330677649, []int{7}
}
func (m *QueryOwnerAccountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwnerAccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwnerAccountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwnerAccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwnerAccountsResponse.Merge(m, src)
}
func (m *QueryOwnerAccountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwnerAccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwnerAccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwnerAccountsResponse proto.InternalMessageInfo

// QueryOwnerDomainsRequest is the request type for the Query/OwnerDomains RPC method.
type QueryOwnerDomainsRequest struct {
	// Owner is the owner of accounts.
	Owner      string             `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOwnerDomainsRequest) Reset()         { *m = QueryOwnerDomainsRequest{} }
func (m *QueryOwnerDomainsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOwnerDomainsRequest) ProtoMessage()    {}
func (*QueryOwnerDomainsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da7e34c330677649, []int{8}
}
func (m *QueryOwnerDomainsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwnerDomainsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwnerDomainsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwnerDomainsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwnerDomainsRequest.Merge(m, src)
}
func (m *QueryOwnerDomainsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwnerDomainsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwnerDomainsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwnerDomainsRequest proto.InternalMessageInfo

// QueryOwnerDomainsResponse is the response type for the Query/OwnerDomains RPC method.
type QueryOwnerDomainsResponse struct {
	// Accounts is the accounts associated with owner.
	Domains []*Domain           `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty" yaml:"domains"`
	Page    *query.PageResponse `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (m *QueryOwnerDomainsResponse) Reset()         { *m = QueryOwnerDomainsResponse{} }
func (m *QueryOwnerDomainsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOwnerDomainsResponse) ProtoMessage()    {}
func (*QueryOwnerDomainsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_da7e34c330677649, []int{9}
}
func (m *QueryOwnerDomainsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwnerDomainsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwnerDomainsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwnerDomainsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwnerDomainsResponse.Merge(m, src)
}
func (m *QueryOwnerDomainsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwnerDomainsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwnerDomainsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwnerDomainsResponse proto.InternalMessageInfo

// QueryResourceAccountsRequest is the request type for the Query/ResourceAccounts RPC method.
type QueryResourceAccountsRequest struct {
	// Uri is the uri of the resource. query.pb.gw.to doesn't respect gogoproto.customname, so we're stuck with Uri.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty" yaml:"uri"`
	// Resource is the resource of interest.
	Resource   string             `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty" yaml:"resource"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryResourceAccountsRequest) Reset()         { *m = QueryResourceAccountsRequest{} }
func (m *QueryResourceAccountsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryResourceAccountsRequest) ProtoMessage()    {}
func (*QueryResourceAccountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da7e34c330677649, []int{10}
}
func (m *QueryResourceAccountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResourceAccountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResourceAccountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryResourceAccountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResourceAccountsRequest.Merge(m, src)
}
func (m *QueryResourceAccountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryResourceAccountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResourceAccountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResourceAccountsRequest proto.InternalMessageInfo

// QueryResourceAccountsResponse is the response type for the Query/ResourceAccounts RPC method.
type QueryResourceAccountsResponse struct {
	// Accounts are the accounts associated with the resource.
	Accounts []*Account          `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty" yaml:"accounts"`
	Page     *query.PageResponse `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (m *QueryResourceAccountsResponse) Reset()         { *m = QueryResourceAccountsResponse{} }
func (m *QueryResourceAccountsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryResourceAccountsResponse) ProtoMessage()    {}
func (*QueryResourceAccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_da7e34c330677649, []int{11}
}
func (m *QueryResourceAccountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResourceAccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResourceAccountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryResourceAccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResourceAccountsResponse.Merge(m, src)
}
func (m *QueryResourceAccountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryResourceAccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResourceAccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResourceAccountsResponse proto.InternalMessageInfo

// QueryBrokerAccountsRequest is the request type for the Query/BrokerAccounts RPC method.
type QueryBrokerAccountsRequest struct {
	// Broker is the broker of accounts.
	Broker     string             `protobuf:"bytes,1,opt,name=broker,proto3" json:"broker,omitempty" yaml:"broker"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBrokerAccountsRequest) Reset()         { *m = QueryBrokerAccountsRequest{} }
func (m *QueryBrokerAccountsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBrokerAccountsRequest) ProtoMessage()    {}
func (*QueryBrokerAccountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da7e34c330677649, []int{12}
}
func (m *QueryBrokerAccountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBrokerAccountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBrokerAccountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBrokerAccountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBrokerAccountsRequest.Merge(m, src)
}
func (m *QueryBrokerAccountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBrokerAccountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBrokerAccountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBrokerAccountsRequest proto.InternalMessageInfo

// QueryBrokerAccountsResponse is the response type for the Query/BrokerAccounts RPC method.
type QueryBrokerAccountsResponse struct {
	// Accounts is the accounts associated with broker.
	Accounts []*Account          `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty" yaml:"accounts"`
	Page     *query.PageResponse `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (m *QueryBrokerAccountsResponse) Reset()         { *m = QueryBrokerAccountsResponse{} }
func (m *QueryBrokerAccountsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBrokerAccountsResponse) ProtoMessage()    {}
func (*QueryBrokerAccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_da7e34c330677649, []int{13}
}
func (m *QueryBrokerAccountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBrokerAccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBrokerAccountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBrokerAccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBrokerAccountsResponse.Merge(m, src)
}
func (m *QueryBrokerAccountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBrokerAccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBrokerAccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBrokerAccountsResponse proto.InternalMessageInfo

// QueryBrokerDomainsRequest is the request type for the Query/BrokerDomains RPC method.
type QueryBrokerDomainsRequest struct {
	// Broker is the broker of accounts.
	Broker     string             `protobuf:"bytes,1,opt,name=broker,proto3" json:"broker,omitempty" yaml:"broker"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBrokerDomainsRequest) Reset()         { *m = QueryBrokerDomainsRequest{} }
func (m *QueryBrokerDomainsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBrokerDomainsRequest) ProtoMessage()    {}
func (*QueryBrokerDomainsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da7e34c330677649, []int{14}
}
func (m *QueryBrokerDomainsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBrokerDomainsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBrokerDomainsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBrokerDomainsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBrokerDomainsRequest.Merge(m, src)
}
func (m *QueryBrokerDomainsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBrokerDomainsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBrokerDomainsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBrokerDomainsRequest proto.InternalMessageInfo

// QueryBrokerDomainsResponse is the response type for the Query/BrokerDomains RPC method.
type QueryBrokerDomainsResponse struct {
	// Accounts is the accounts associated with broker.
	Domains []*Domain           `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty" yaml:"domains"`
	Page    *query.PageResponse `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (m *QueryBrokerDomainsResponse) Reset()         { *m = QueryBrokerDomainsResponse{} }
func (m *QueryBrokerDomainsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBrokerDomainsResponse) ProtoMessage()    {}
func (*QueryBrokerDomainsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_da7e34c330677649, []int{15}
}
func (m *QueryBrokerDomainsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBrokerDomainsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBrokerDomainsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBrokerDomainsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBrokerDomainsResponse.Merge(m, src)
}
func (m *QueryBrokerDomainsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBrokerDomainsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBrokerDomainsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBrokerDomainsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryDomainRequest)(nil), "starnamed.x.starname.v1beta1.QueryDomainRequest")
	proto.RegisterType((*QueryDomainResponse)(nil), "starnamed.x.starname.v1beta1.QueryDomainResponse")
	proto.RegisterType((*QueryDomainAccountsRequest)(nil), "starnamed.x.starname.v1beta1.QueryDomainAccountsRequest")
	proto.RegisterType((*QueryDomainAccountsResponse)(nil), "starnamed.x.starname.v1beta1.QueryDomainAccountsResponse")
	proto.RegisterType((*QueryStarnameRequest)(nil), "starnamed.x.starname.v1beta1.QueryStarnameRequest")
	proto.RegisterType((*QueryStarnameResponse)(nil), "starnamed.x.starname.v1beta1.QueryStarnameResponse")
	proto.RegisterType((*QueryOwnerAccountsRequest)(nil), "starnamed.x.starname.v1beta1.QueryOwnerAccountsRequest")
	proto.RegisterType((*QueryOwnerAccountsResponse)(nil), "starnamed.x.starname.v1beta1.QueryOwnerAccountsResponse")
	proto.RegisterType((*QueryOwnerDomainsRequest)(nil), "starnamed.x.starname.v1beta1.QueryOwnerDomainsRequest")
	proto.RegisterType((*QueryOwnerDomainsResponse)(nil), "starnamed.x.starname.v1beta1.QueryOwnerDomainsResponse")
	proto.RegisterType((*QueryResourceAccountsRequest)(nil), "starnamed.x.starname.v1beta1.QueryResourceAccountsRequest")
	proto.RegisterType((*QueryResourceAccountsResponse)(nil), "starnamed.x.starname.v1beta1.QueryResourceAccountsResponse")
	proto.RegisterType((*QueryBrokerAccountsRequest)(nil), "starnamed.x.starname.v1beta1.QueryBrokerAccountsRequest")
	proto.RegisterType((*QueryBrokerAccountsResponse)(nil), "starnamed.x.starname.v1beta1.QueryBrokerAccountsResponse")
	proto.RegisterType((*QueryBrokerDomainsRequest)(nil), "starnamed.x.starname.v1beta1.QueryBrokerDomainsRequest")
	proto.RegisterType((*QueryBrokerDomainsResponse)(nil), "starnamed.x.starname.v1beta1.QueryBrokerDomainsResponse")
}

func init() { proto.RegisterFile("x/starname/types/query.proto", fileDescriptor_da7e34c330677649) }

var fileDescriptor_da7e34c330677649 = []byte{
	// 951 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x97, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0x3d, 0x4d, 0xeb, 0xa6, 0xcf, 0x4d, 0x5a, 0xa6, 0x45, 0x32, 0x8b, 0x59, 0x87, 0xa1,
	0x24, 0x71, 0x68, 0x77, 0x6a, 0x17, 0xb5, 0x69, 0xcb, 0x05, 0x0b, 0xc1, 0x31, 0xb0, 0x95, 0x38,
	0x70, 0x5b, 0x3b, 0xcb, 0xb2, 0x22, 0xde, 0x71, 0xf7, 0x47, 0x69, 0x64, 0xf9, 0xc2, 0x11, 0x24,
	0x40, 0x42, 0xe2, 0xce, 0x0d, 0x21, 0x90, 0x00, 0x95, 0x43, 0xff, 0x83, 0x72, 0x8b, 0xc4, 0x85,
	0x93, 0x05, 0x0e, 0x7f, 0x81, 0xff, 0x02, 0xb4, 0xf3, 0xc3, 0xf1, 0xae, 0x7f, 0xb0, 0x4e, 0x23,
	0xc5, 0x97, 0xd8, 0x99, 0x37, 0xef, 0xbd, 0xcf, 0x7c, 0x67, 0xde, 0xbc, 0x31, 0x94, 0x1e, 0xd3,
	0x20, 0xb4, 0x7c, 0xcf, 0x6a, 0xd9, 0x34, 0xdc, 0x6f, 0xdb, 0x01, 0x7d, 0x18, 0xd9, 0xfe, 0xbe,
	0xd1, 0xf6, 0x59, 0xc8, 0x70, 0x49, 0xd9, 0x76, 0x8d, 0xc7, 0x86, 0xfa, 0x6e, 0x3c, 0xaa, 0x36,
	0xec, 0xd0, 0xaa, 0x6a, 0x57, 0x1d, 0xe6, 0x30, 0x3e, 0x91, 0xc6, 0xdf, 0x84, 0x8f, 0x56, 0x72,
	0x18, 0x73, 0xf6, 0x6c, 0x6a, 0xb5, 0x5d, 0x6a, 0x79, 0x1e, 0x0b, 0xad, 0xd0, 0x65, 0x5e, 0xa0,
	0xac, 0x63, 0xf9, 0xf8, 0x5f, 0x69, 0xdd, 0x6a, 0xb2, 0xa0, 0xc5, 0x02, 0xda, 0xb0, 0x02, 0x5b,
	0x80, 0x50, 0x99, 0x8c, 0xb6, 0x2d, 0xc7, 0xf5, 0x78, 0x28, 0x31, 0x97, 0xdc, 0x05, 0xfc, 0x41,
	0x3c, 0xe3, 0x1d, 0xd6, 0xb2, 0x5c, 0xcf, 0xb4, 0x1f, 0x46, 0x76, 0x10, 0xe2, 0xd7, 0xe0, 0x6c,
	0x1c, 0xbb, 0x88, 0xd6, 0xd0, 0xe6, 0x85, 0xfa, 0xa5, 0x41, 0xaf, 0x5c, 0xd8, 0xb7, 0x5a, 0x7b,
	0xf7, 0x48, 0x3c, 0x4a, 0x4c, 0x6e, 0x24, 0x1f, 0xc3, 0x95, 0x84, 0x6b, 0xd0, 0x66, 0x5e, 0x60,
	0xe3, 0x1d, 0xc8, 0xef, 0xf2, 0x11, 0xee, 0x5d, 0xa8, 0x5d, 0x33, 0x66, 0x2d, 0xdf, 0x10, 0xde,
	0xf5, 0x17, 0x06, 0xbd, 0xf2, 0x8a, 0xc8, 0x21, 0xbc, 0x89, 0x29, 0xc3, 0x90, 0xaf, 0x11, 0x68,
	0x23, 0x89, 0xde, 0x6e, 0x36, 0x59, 0xe4, 0x85, 0x81, 0x62, 0xad, 0x24, 0xf2, 0x5d, 0x98, 0x11,
	0x09, 0xbf, 0x0b, 0x70, 0x24, 0x40, 0xf1, 0x0c, 0xc7, 0x5b, 0x37, 0x84, 0x5a, 0x46, 0xac, 0x96,
	0x21, 0xb6, 0x4d, 0xb1, 0xbd, 0x6f, 0x39, 0xb6, 0x4c, 0x63, 0x8e, 0x78, 0x92, 0xdf, 0x10, 0xbc,
	0x3c, 0x91, 0x48, 0x4a, 0xf0, 0x21, 0x2c, 0x5b, 0x72, 0xac, 0x88, 0xd6, 0x96, 0x36, 0x0b, 0xb5,
	0xd7, 0x67, 0x8b, 0x20, 0x23, 0xd4, 0xaf, 0x0c, 0x7a, 0xe5, 0x4b, 0x82, 0x5d, 0x05, 0x20, 0xe6,
	0x30, 0x16, 0xbe, 0x0f, 0x67, 0xdb, 0x96, 0x63, 0x4b, 0xf2, 0x8d, 0xff, 0x25, 0x17, 0x38, 0x26,
	0x77, 0x22, 0xef, 0xc1, 0x55, 0xce, 0xfc, 0x40, 0x26, 0x57, 0xfa, 0x51, 0x58, 0x56, 0x3c, 0x52,
	0xc1, 0x11, 0x0a, 0x65, 0x21, 0xe6, 0x70, 0x12, 0xd9, 0x83, 0x17, 0x53, 0x81, 0xe4, 0xb2, 0x1f,
	0xc0, 0x79, 0x89, 0x2a, 0xb7, 0x3e, 0xe3, 0xaa, 0xf1, 0xa0, 0x57, 0x5e, 0x4d, 0xac, 0x9a, 0x98,
	0x2a, 0x12, 0xf9, 0x12, 0xc1, 0x4b, 0x3c, 0xdd, 0xce, 0x67, 0x9e, 0xed, 0xa7, 0x37, 0x7f, 0x1d,
	0xce, 0xb1, 0x78, 0x5c, 0x92, 0x5f, 0x1e, 0xf4, 0xca, 0x17, 0x45, 0x24, 0x3e, 0x4c, 0x4c, 0x61,
	0x3e, 0xb1, 0x9d, 0xff, 0x55, 0x9d, 0xc5, 0x14, 0xcd, 0x22, 0x6f, 0xfc, 0x17, 0x08, 0x8a, 0x47,
	0xcc, 0xe2, 0xc8, 0x9e, 0x9a, 0x80, 0x3f, 0x25, 0xb6, 0x73, 0x08, 0x23, 0xf5, 0x33, 0xe1, 0xbc,
	0x28, 0x55, 0x25, 0x5f, 0xb6, 0xcb, 0x63, 0xe4, 0x00, 0x49, 0x77, 0x62, 0xaa, 0x40, 0xcf, 0xa7,
	0xdd, 0x53, 0x04, 0x25, 0x8e, 0x6b, 0xda, 0x01, 0x8b, 0xfc, 0xa6, 0x9d, 0x3e, 0x80, 0x6b, 0xb0,
	0x14, 0xf9, 0xae, 0x54, 0x6f, 0x75, 0xd0, 0x2b, 0x83, 0xe0, 0x88, 0x7c, 0x97, 0x98, 0xb1, 0x29,
	0xae, 0x2f, 0x5f, 0x3a, 0x73, 0x86, 0x44, 0x7d, 0x29, 0x0b, 0x31, 0x87, 0x93, 0x52, 0x52, 0x2f,
	0x1d, 0x5b, 0xea, 0x27, 0x08, 0x5e, 0x99, 0xc2, 0xbe, 0xc8, 0xc7, 0x75, 0x78, 0xdd, 0xd7, 0x7d,
	0xf6, 0xe9, 0x78, 0xc5, 0x57, 0x20, 0xdf, 0xe0, 0x86, 0xf1, 0xeb, 0x5e, 0x8c, 0x13, 0x53, 0x4e,
	0x38, 0xf9, 0xeb, 0x3e, 0x4d, 0xb4, 0xc8, 0x32, 0x7e, 0xa5, 0x0a, 0x4d, 0x40, 0xa7, 0xca, 0xfe,
	0x14, 0x54, 0xfc, 0x39, 0xb9, 0xaf, 0x8b, 0x5e, 0xfa, 0xb5, 0x1f, 0x0b, 0x70, 0x8e, 0xf3, 0xe2,
	0xef, 0x10, 0xe4, 0x45, 0x3a, 0x7c, 0x73, 0x36, 0xd4, 0xf8, 0x53, 0x4a, 0xab, 0xce, 0xe1, 0x21,
	0xf2, 0x93, 0x8d, 0xcf, 0xff, 0xfc, 0xf7, 0xdb, 0x33, 0xaf, 0xe2, 0xf2, 0xd1, 0x23, 0x4f, 0xbd,
	0xdf, 0xc4, 0xca, 0x68, 0x27, 0x1e, 0xec, 0xe2, 0xa7, 0x08, 0x56, 0x93, 0x4f, 0x10, 0xbc, 0x9d,
	0x39, 0x5d, 0xaa, 0xb0, 0xb4, 0xbb, 0xc7, 0xf0, 0x94, 0xc0, 0x35, 0x0e, 0x7c, 0x1d, 0x6f, 0x8d,
	0x03, 0xab, 0xc3, 0x3c, 0x24, 0x17, 0x9f, 0x5d, 0xfc, 0x3d, 0x82, 0x65, 0xf5, 0x82, 0xc0, 0xb5,
	0x0c, 0xb9, 0x53, 0xef, 0x16, 0xed, 0xd6, 0x5c, 0x3e, 0x92, 0xf4, 0x3a, 0x27, 0x5d, 0xc7, 0xd7,
	0xa6, 0x92, 0xd2, 0x8e, 0xb2, 0x74, 0xf1, 0x13, 0x04, 0x2b, 0x89, 0x46, 0x8f, 0xef, 0x64, 0x48,
	0x3a, 0xe9, 0xa1, 0xa2, 0x6d, 0xcf, 0xef, 0x28, 0x91, 0x6f, 0x72, 0xe4, 0x2d, 0xbc, 0x39, 0x43,
	0x5c, 0xde, 0xa3, 0x69, 0x87, 0x7f, 0x74, 0xf1, 0x2f, 0x08, 0x2e, 0x8e, 0xb6, 0x57, 0x7c, 0x3b,
	0x6b, 0xf2, 0xe4, 0x2d, 0xa1, 0xdd, 0x99, 0xdb, 0x4f, 0x32, 0x53, 0xce, 0x5c, 0xc1, 0x1b, 0xd3,
	0x4e, 0x70, 0x1a, 0xf9, 0x0f, 0x04, 0x97, 0xd3, 0x6d, 0x0a, 0xdf, 0xcb, 0x90, 0x7e, 0x4a, 0x5f,
	0xd6, 0xee, 0x1f, 0xcb, 0x57, 0xe2, 0xbf, 0xc5, 0xf1, 0x6f, 0xe3, 0x37, 0x67, 0x48, 0xae, 0xda,
	0x35, 0xed, 0x44, 0xbe, 0xdb, 0xa5, 0x1d, 0xf5, 0xbf, 0xa8, 0xca, 0x64, 0xa7, 0xc8, 0x54, 0x95,
	0x13, 0xdb, 0x5d, 0xa6, 0xaa, 0x9c, 0xdc, 0x96, 0x32, 0x55, 0xa5, 0xb8, 0xe3, 0x69, 0x47, 0x7c,
	0x76, 0xf1, 0xef, 0x08, 0x56, 0x12, 0xf7, 0x73, 0xa6, 0x13, 0x3f, 0xa9, 0xc5, 0x68, 0xdb, 0xf3,
	0x3b, 0x4a, 0xf0, 0x2a, 0x07, 0x7f, 0x03, 0x57, 0xa6, 0x9f, 0x9e, 0x14, 0x77, 0x7d, 0xe7, 0xd9,
	0x3f, 0x7a, 0xee, 0x87, 0xbe, 0x9e, 0x7b, 0xd6, 0xd7, 0xd1, 0x41, 0x5f, 0x47, 0x7f, 0xf7, 0x75,
	0xf4, 0xcd, 0xa1, 0x9e, 0x3b, 0x38, 0xd4, 0x73, 0x7f, 0x1d, 0xea, 0xb9, 0x8f, 0x6e, 0x38, 0x6e,
	0xf8, 0x49, 0xd4, 0x30, 0x9a, 0xac, 0x45, 0x5d, 0xf6, 0xe8, 0x06, 0xf3, 0xec, 0x61, 0xf8, 0x5d,
	0x9a, 0xfe, 0x3d, 0xdd, 0xc8, 0xf3, 0x9f, 0xc7, 0xb7, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x38,
	0xc1, 0x2e, 0x45, 0xda, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Domain gets a starname's domain info.
	Domain(ctx context.Context, in *QueryDomainRequest, opts ...grpc.CallOption) (*QueryDomainResponse, error)
	// DomainAccounts gets accounts associated with a given domain.
	DomainAccounts(ctx context.Context, in *QueryDomainAccountsRequest, opts ...grpc.CallOption) (*QueryDomainAccountsResponse, error)
	// Starname gets accounts associated with a given domain.
	Starname(ctx context.Context, in *QueryStarnameRequest, opts ...grpc.CallOption) (*QueryStarnameResponse, error)
	// OwnerAccounts gets accounts associated with a given owner.
	OwnerAccounts(ctx context.Context, in *QueryOwnerAccountsRequest, opts ...grpc.CallOption) (*QueryOwnerAccountsResponse, error)
	// OwnerDomains gets domains associated with a given owner.
	OwnerDomains(ctx context.Context, in *QueryOwnerDomainsRequest, opts ...grpc.CallOption) (*QueryOwnerDomainsResponse, error)
	// ResourceAccounts gets accounts associated with a given resource.
	ResourceAccounts(ctx context.Context, in *QueryResourceAccountsRequest, opts ...grpc.CallOption) (*QueryResourceAccountsResponse, error)
	// BrokerAccounts gets accounts associated with a given broker.
	BrokerAccounts(ctx context.Context, in *QueryBrokerAccountsRequest, opts ...grpc.CallOption) (*QueryBrokerAccountsResponse, error)
	// BrokerDomains gets domains associated with a given broker.
	BrokerDomains(ctx context.Context, in *QueryBrokerDomainsRequest, opts ...grpc.CallOption) (*QueryBrokerDomainsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Domain(ctx context.Context, in *QueryDomainRequest, opts ...grpc.CallOption) (*QueryDomainResponse, error) {
	out := new(QueryDomainResponse)
	err := c.cc.Invoke(ctx, "/starnamed.x.starname.v1beta1.Query/Domain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DomainAccounts(ctx context.Context, in *QueryDomainAccountsRequest, opts ...grpc.CallOption) (*QueryDomainAccountsResponse, error) {
	out := new(QueryDomainAccountsResponse)
	err := c.cc.Invoke(ctx, "/starnamed.x.starname.v1beta1.Query/DomainAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Starname(ctx context.Context, in *QueryStarnameRequest, opts ...grpc.CallOption) (*QueryStarnameResponse, error) {
	out := new(QueryStarnameResponse)
	err := c.cc.Invoke(ctx, "/starnamed.x.starname.v1beta1.Query/Starname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OwnerAccounts(ctx context.Context, in *QueryOwnerAccountsRequest, opts ...grpc.CallOption) (*QueryOwnerAccountsResponse, error) {
	out := new(QueryOwnerAccountsResponse)
	err := c.cc.Invoke(ctx, "/starnamed.x.starname.v1beta1.Query/OwnerAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OwnerDomains(ctx context.Context, in *QueryOwnerDomainsRequest, opts ...grpc.CallOption) (*QueryOwnerDomainsResponse, error) {
	out := new(QueryOwnerDomainsResponse)
	err := c.cc.Invoke(ctx, "/starnamed.x.starname.v1beta1.Query/OwnerDomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ResourceAccounts(ctx context.Context, in *QueryResourceAccountsRequest, opts ...grpc.CallOption) (*QueryResourceAccountsResponse, error) {
	out := new(QueryResourceAccountsResponse)
	err := c.cc.Invoke(ctx, "/starnamed.x.starname.v1beta1.Query/ResourceAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BrokerAccounts(ctx context.Context, in *QueryBrokerAccountsRequest, opts ...grpc.CallOption) (*QueryBrokerAccountsResponse, error) {
	out := new(QueryBrokerAccountsResponse)
	err := c.cc.Invoke(ctx, "/starnamed.x.starname.v1beta1.Query/BrokerAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BrokerDomains(ctx context.Context, in *QueryBrokerDomainsRequest, opts ...grpc.CallOption) (*QueryBrokerDomainsResponse, error) {
	out := new(QueryBrokerDomainsResponse)
	err := c.cc.Invoke(ctx, "/starnamed.x.starname.v1beta1.Query/BrokerDomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Domain gets a starname's domain info.
	Domain(context.Context, *QueryDomainRequest) (*QueryDomainResponse, error)
	// DomainAccounts gets accounts associated with a given domain.
	DomainAccounts(context.Context, *QueryDomainAccountsRequest) (*QueryDomainAccountsResponse, error)
	// Starname gets accounts associated with a given domain.
	Starname(context.Context, *QueryStarnameRequest) (*QueryStarnameResponse, error)
	// OwnerAccounts gets accounts associated with a given owner.
	OwnerAccounts(context.Context, *QueryOwnerAccountsRequest) (*QueryOwnerAccountsResponse, error)
	// OwnerDomains gets domains associated with a given owner.
	OwnerDomains(context.Context, *QueryOwnerDomainsRequest) (*QueryOwnerDomainsResponse, error)
	// ResourceAccounts gets accounts associated with a given resource.
	ResourceAccounts(context.Context, *QueryResourceAccountsRequest) (*QueryResourceAccountsResponse, error)
	// BrokerAccounts gets accounts associated with a given broker.
	BrokerAccounts(context.Context, *QueryBrokerAccountsRequest) (*QueryBrokerAccountsResponse, error)
	// BrokerDomains gets domains associated with a given broker.
	BrokerDomains(context.Context, *QueryBrokerDomainsRequest) (*QueryBrokerDomainsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Domain(ctx context.Context, req *QueryDomainRequest) (*QueryDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Domain not implemented")
}
func (*UnimplementedQueryServer) DomainAccounts(ctx context.Context, req *QueryDomainAccountsRequest) (*QueryDomainAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainAccounts not implemented")
}
func (*UnimplementedQueryServer) Starname(ctx context.Context, req *QueryStarnameRequest) (*QueryStarnameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Starname not implemented")
}
func (*UnimplementedQueryServer) OwnerAccounts(ctx context.Context, req *QueryOwnerAccountsRequest) (*QueryOwnerAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OwnerAccounts not implemented")
}
func (*UnimplementedQueryServer) OwnerDomains(ctx context.Context, req *QueryOwnerDomainsRequest) (*QueryOwnerDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OwnerDomains not implemented")
}
func (*UnimplementedQueryServer) ResourceAccounts(ctx context.Context, req *QueryResourceAccountsRequest) (*QueryResourceAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResourceAccounts not implemented")
}
func (*UnimplementedQueryServer) BrokerAccounts(ctx context.Context, req *QueryBrokerAccountsRequest) (*QueryBrokerAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrokerAccounts not implemented")
}
func (*UnimplementedQueryServer) BrokerDomains(ctx context.Context, req *QueryBrokerDomainsRequest) (*QueryBrokerDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrokerDomains not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Domain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Domain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/starnamed.x.starname.v1beta1.Query/Domain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Domain(ctx, req.(*QueryDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DomainAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDomainAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DomainAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/starnamed.x.starname.v1beta1.Query/DomainAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DomainAccounts(ctx, req.(*QueryDomainAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Starname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStarnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Starname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/starnamed.x.starname.v1beta1.Query/Starname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Starname(ctx, req.(*QueryStarnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OwnerAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOwnerAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OwnerAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/starnamed.x.starname.v1beta1.Query/OwnerAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OwnerAccounts(ctx, req.(*QueryOwnerAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OwnerDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOwnerDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OwnerDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/starnamed.x.starname.v1beta1.Query/OwnerDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OwnerDomains(ctx, req.(*QueryOwnerDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ResourceAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryResourceAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ResourceAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/starnamed.x.starname.v1beta1.Query/ResourceAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ResourceAccounts(ctx, req.(*QueryResourceAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BrokerAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBrokerAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BrokerAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/starnamed.x.starname.v1beta1.Query/BrokerAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BrokerAccounts(ctx, req.(*QueryBrokerAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BrokerDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBrokerDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BrokerDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/starnamed.x.starname.v1beta1.Query/BrokerDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BrokerDomains(ctx, req.(*QueryBrokerDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "starnamed.x.starname.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Domain",
			Handler:    _Query_Domain_Handler,
		},
		{
			MethodName: "DomainAccounts",
			Handler:    _Query_DomainAccounts_Handler,
		},
		{
			MethodName: "Starname",
			Handler:    _Query_Starname_Handler,
		},
		{
			MethodName: "OwnerAccounts",
			Handler:    _Query_OwnerAccounts_Handler,
		},
		{
			MethodName: "OwnerDomains",
			Handler:    _Query_OwnerDomains_Handler,
		},
		{
			MethodName: "ResourceAccounts",
			Handler:    _Query_ResourceAccounts_Handler,
		},
		{
			MethodName: "BrokerAccounts",
			Handler:    _Query_BrokerAccounts_Handler,
		},
		{
			MethodName: "BrokerDomains",
			Handler:    _Query_BrokerDomains_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "x/starname/types/query.proto",
}

func (m *QueryDomainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDomainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDomainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDomainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDomainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDomainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Domain != nil {
		{
			size, err := m.Domain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDomainAccountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDomainAccountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDomainAccountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDomainAccountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDomainAccountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDomainAccountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStarnameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStarnameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStarnameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Starname) > 0 {
		i -= len(m.Starname)
		copy(dAtA[i:], m.Starname)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Starname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStarnameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStarnameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStarnameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOwnerAccountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwnerAccountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwnerAccountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOwnerAccountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwnerAccountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwnerAccountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOwnerDomainsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwnerDomainsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwnerDomainsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOwnerDomainsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwnerDomainsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwnerDomainsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Domains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryResourceAccountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResourceAccountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResourceAccountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Resource) > 0 {
		i -= len(m.Resource)
		copy(dAtA[i:], m.Resource)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Resource)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryResourceAccountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResourceAccountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResourceAccountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBrokerAccountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBrokerAccountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBrokerAccountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Broker) > 0 {
		i -= len(m.Broker)
		copy(dAtA[i:], m.Broker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Broker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBrokerAccountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBrokerAccountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBrokerAccountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBrokerDomainsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBrokerDomainsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBrokerDomainsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Broker) > 0 {
		i -= len(m.Broker)
		copy(dAtA[i:], m.Broker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Broker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBrokerDomainsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBrokerDomainsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBrokerDomainsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != nil {
		{
			size, err := m.Page.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domains) > 0 {
		for iNdEx := len(m.Domains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Domains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryDomainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDomainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Domain != nil {
		l = m.Domain.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDomainAccountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDomainAccountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStarnameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Starname)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStarnameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOwnerAccountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOwnerAccountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOwnerDomainsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOwnerDomainsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, e := range m.Domains {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryResourceAccountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Resource)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryResourceAccountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBrokerAccountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Broker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBrokerAccountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBrokerDomainsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Broker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBrokerDomainsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, e := range m.Domains {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryDomainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDomainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDomainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDomainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Domain == nil {
				m.Domain = &Domain{}
			}
			if err := m.Domain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDomainAccountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDomainAccountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDomainAccountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDomainAccountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDomainAccountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDomainAccountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, &Account{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &query.PageResponse{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStarnameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStarnameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStarnameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Starname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Starname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStarnameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStarnameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStarnameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwnerAccountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwnerAccountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwnerAccountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwnerAccountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwnerAccountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwnerAccountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, &Account{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &query.PageResponse{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwnerDomainsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwnerDomainsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwnerDomainsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwnerDomainsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwnerDomainsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwnerDomainsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, &Domain{})
			if err := m.Domains[len(m.Domains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &query.PageResponse{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResourceAccountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResourceAccountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResourceAccountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResourceAccountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResourceAccountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResourceAccountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, &Account{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &query.PageResponse{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBrokerAccountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBrokerAccountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBrokerAccountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Broker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Broker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBrokerAccountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBrokerAccountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBrokerAccountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, &Account{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &query.PageResponse{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBrokerDomainsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBrokerDomainsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBrokerDomainsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Broker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Broker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBrokerDomainsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBrokerDomainsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBrokerDomainsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, &Domain{})
			if err := m.Domains[len(m.Domains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &query.PageResponse{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
