// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: iov/escrow/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateEscrow defines a message to create an escrow
type MsgCreateEscrow struct {
	Seller    string                                   `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	FeePayer  string                                   `protobuf:"bytes,2,opt,name=fee_payer,json=feePayer,proto3" json:"fee_payer,omitempty"`
	Object    *types.Any                               `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	Price     github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=price,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"price"`
	Deadline  uint64                                   `protobuf:"varint,5,opt,name=deadline,proto3" json:"deadline,omitempty"`
	IsAuction bool                                     `protobuf:"varint,6,opt,name=is_auction,json=isAuction,proto3" json:"is_auction,omitempty"`
}

func (m *MsgCreateEscrow) Reset()         { *m = MsgCreateEscrow{} }
func (m *MsgCreateEscrow) String() string { return proto.CompactTextString(m) }
func (*MsgCreateEscrow) ProtoMessage()    {}
func (*MsgCreateEscrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a2bd9bc1f359d0a, []int{0}
}
func (m *MsgCreateEscrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateEscrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateEscrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateEscrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateEscrow.Merge(m, src)
}
func (m *MsgCreateEscrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateEscrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateEscrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateEscrow proto.InternalMessageInfo

// MsgCreateEscrowResponse defines the Msg/CreateEscrow response type
type MsgCreateEscrowResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreateEscrowResponse) Reset()         { *m = MsgCreateEscrowResponse{} }
func (m *MsgCreateEscrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateEscrowResponse) ProtoMessage()    {}
func (*MsgCreateEscrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a2bd9bc1f359d0a, []int{1}
}
func (m *MsgCreateEscrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateEscrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateEscrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateEscrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateEscrowResponse.Merge(m, src)
}
func (m *MsgCreateEscrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateEscrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateEscrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateEscrowResponse proto.InternalMessageInfo

// MsgUpdateEscrow defines a message to update an escrow
type MsgUpdateEscrow struct {
	Id       string                                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Updater  string                                   `protobuf:"bytes,2,opt,name=updater,proto3" json:"updater,omitempty"`
	FeePayer string                                   `protobuf:"bytes,3,opt,name=fee_payer,json=feePayer,proto3" json:"fee_payer,omitempty"`
	Seller   string                                   `protobuf:"bytes,4,opt,name=seller,proto3" json:"seller,omitempty"`
	Price    github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=price,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"price"`
	Deadline uint64                                   `protobuf:"varint,6,opt,name=deadline,proto3" json:"deadline,omitempty"`
}

func (m *MsgUpdateEscrow) Reset()         { *m = MsgUpdateEscrow{} }
func (m *MsgUpdateEscrow) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateEscrow) ProtoMessage()    {}
func (*MsgUpdateEscrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a2bd9bc1f359d0a, []int{2}
}
func (m *MsgUpdateEscrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateEscrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateEscrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateEscrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateEscrow.Merge(m, src)
}
func (m *MsgUpdateEscrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateEscrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateEscrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateEscrow proto.InternalMessageInfo

// MsgUpdateEscrowResponse defines the Msg/UpdateEscrow response type
type MsgUpdateEscrowResponse struct {
}

func (m *MsgUpdateEscrowResponse) Reset()         { *m = MsgUpdateEscrowResponse{} }
func (m *MsgUpdateEscrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateEscrowResponse) ProtoMessage()    {}
func (*MsgUpdateEscrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a2bd9bc1f359d0a, []int{3}
}
func (m *MsgUpdateEscrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateEscrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateEscrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateEscrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateEscrowResponse.Merge(m, src)
}
func (m *MsgUpdateEscrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateEscrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateEscrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateEscrowResponse proto.InternalMessageInfo

type MsgTransferToEscrow struct {
	Id       string                                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Sender   string                                   `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	FeePayer string                                   `protobuf:"bytes,3,opt,name=fee_payer,json=feePayer,proto3" json:"fee_payer,omitempty"`
	Amount   github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *MsgTransferToEscrow) Reset()         { *m = MsgTransferToEscrow{} }
func (m *MsgTransferToEscrow) String() string { return proto.CompactTextString(m) }
func (*MsgTransferToEscrow) ProtoMessage()    {}
func (*MsgTransferToEscrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a2bd9bc1f359d0a, []int{4}
}
func (m *MsgTransferToEscrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferToEscrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferToEscrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferToEscrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferToEscrow.Merge(m, src)
}
func (m *MsgTransferToEscrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferToEscrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferToEscrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferToEscrow proto.InternalMessageInfo

type MsgTransferToEscrowResponse struct {
}

func (m *MsgTransferToEscrowResponse) Reset()         { *m = MsgTransferToEscrowResponse{} }
func (m *MsgTransferToEscrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransferToEscrowResponse) ProtoMessage()    {}
func (*MsgTransferToEscrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a2bd9bc1f359d0a, []int{5}
}
func (m *MsgTransferToEscrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferToEscrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferToEscrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferToEscrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferToEscrowResponse.Merge(m, src)
}
func (m *MsgTransferToEscrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferToEscrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferToEscrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferToEscrowResponse proto.InternalMessageInfo

type MsgRefundEscrow struct {
	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Sender   string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	FeePayer string `protobuf:"bytes,3,opt,name=fee_payer,json=feePayer,proto3" json:"fee_payer,omitempty"`
}

func (m *MsgRefundEscrow) Reset()         { *m = MsgRefundEscrow{} }
func (m *MsgRefundEscrow) String() string { return proto.CompactTextString(m) }
func (*MsgRefundEscrow) ProtoMessage()    {}
func (*MsgRefundEscrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a2bd9bc1f359d0a, []int{6}
}
func (m *MsgRefundEscrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRefundEscrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRefundEscrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRefundEscrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRefundEscrow.Merge(m, src)
}
func (m *MsgRefundEscrow) XXX_Size() int {
	return m.Size()
}
func (m *MsgRefundEscrow) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRefundEscrow.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRefundEscrow proto.InternalMessageInfo

type MsgRefundEscrowResponse struct {
}

func (m *MsgRefundEscrowResponse) Reset()         { *m = MsgRefundEscrowResponse{} }
func (m *MsgRefundEscrowResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRefundEscrowResponse) ProtoMessage()    {}
func (*MsgRefundEscrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a2bd9bc1f359d0a, []int{7}
}
func (m *MsgRefundEscrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRefundEscrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRefundEscrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRefundEscrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRefundEscrowResponse.Merge(m, src)
}
func (m *MsgRefundEscrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRefundEscrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRefundEscrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRefundEscrowResponse proto.InternalMessageInfo

type MsgCompleteAuction struct {
	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Sender   string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	FeePayer string `protobuf:"bytes,3,opt,name=fee_payer,json=feePayer,proto3" json:"fee_payer,omitempty"`
}

func (m *MsgCompleteAuction) Reset()         { *m = MsgCompleteAuction{} }
func (m *MsgCompleteAuction) String() string { return proto.CompactTextString(m) }
func (*MsgCompleteAuction) ProtoMessage()    {}
func (*MsgCompleteAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a2bd9bc1f359d0a, []int{8}
}
func (m *MsgCompleteAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCompleteAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCompleteAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCompleteAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCompleteAuction.Merge(m, src)
}
func (m *MsgCompleteAuction) XXX_Size() int {
	return m.Size()
}
func (m *MsgCompleteAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCompleteAuction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCompleteAuction proto.InternalMessageInfo

type MsgCompleteAuctionResponse struct {
}

func (m *MsgCompleteAuctionResponse) Reset()         { *m = MsgCompleteAuctionResponse{} }
func (m *MsgCompleteAuctionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCompleteAuctionResponse) ProtoMessage()    {}
func (*MsgCompleteAuctionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a2bd9bc1f359d0a, []int{9}
}
func (m *MsgCompleteAuctionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCompleteAuctionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCompleteAuctionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCompleteAuctionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCompleteAuctionResponse.Merge(m, src)
}
func (m *MsgCompleteAuctionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCompleteAuctionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCompleteAuctionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCompleteAuctionResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateEscrow)(nil), "starnamed.x.escrow.v1beta1.MsgCreateEscrow")
	proto.RegisterType((*MsgCreateEscrowResponse)(nil), "starnamed.x.escrow.v1beta1.MsgCreateEscrowResponse")
	proto.RegisterType((*MsgUpdateEscrow)(nil), "starnamed.x.escrow.v1beta1.MsgUpdateEscrow")
	proto.RegisterType((*MsgUpdateEscrowResponse)(nil), "starnamed.x.escrow.v1beta1.MsgUpdateEscrowResponse")
	proto.RegisterType((*MsgTransferToEscrow)(nil), "starnamed.x.escrow.v1beta1.MsgTransferToEscrow")
	proto.RegisterType((*MsgTransferToEscrowResponse)(nil), "starnamed.x.escrow.v1beta1.MsgTransferToEscrowResponse")
	proto.RegisterType((*MsgRefundEscrow)(nil), "starnamed.x.escrow.v1beta1.MsgRefundEscrow")
	proto.RegisterType((*MsgRefundEscrowResponse)(nil), "starnamed.x.escrow.v1beta1.MsgRefundEscrowResponse")
	proto.RegisterType((*MsgCompleteAuction)(nil), "starnamed.x.escrow.v1beta1.MsgCompleteAuction")
	proto.RegisterType((*MsgCompleteAuctionResponse)(nil), "starnamed.x.escrow.v1beta1.MsgCompleteAuctionResponse")
}

func init() { proto.RegisterFile("iov/escrow/v1beta1/tx.proto", fileDescriptor_5a2bd9bc1f359d0a) }

var fileDescriptor_5a2bd9bc1f359d0a = []byte{
	// 658 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x95, 0xcf, 0x4e, 0xdb, 0x4e,
	0x10, 0xc7, 0xe3, 0x24, 0xe4, 0x07, 0x0b, 0xfa, 0x51, 0x6d, 0x11, 0x35, 0xa6, 0x98, 0x28, 0xa7,
	0x54, 0x88, 0x75, 0x01, 0xa9, 0x3d, 0x03, 0xed, 0xa1, 0x07, 0xd4, 0xca, 0xa2, 0x95, 0xda, 0x0b,
	0x5a, 0xdb, 0x13, 0x77, 0xdb, 0x64, 0xd7, 0xf2, 0x3a, 0x94, 0x48, 0x7d, 0x88, 0x3e, 0x07, 0xe7,
	0xde, 0x7b, 0x45, 0x3d, 0x71, 0xe8, 0xa1, 0xa7, 0xfe, 0x81, 0x07, 0xe8, 0x2b, 0x54, 0x59, 0xaf,
	0x4d, 0x1c, 0xa0, 0x56, 0x24, 0xda, 0x53, 0x32, 0xde, 0xf9, 0xb3, 0xdf, 0xcf, 0xcc, 0xd8, 0x68,
	0x99, 0x89, 0x43, 0x07, 0xa4, 0x1f, 0x8b, 0x77, 0xce, 0xe1, 0x86, 0x07, 0x09, 0xdd, 0x70, 0x92,
	0x23, 0x12, 0xc5, 0x22, 0x11, 0xd8, 0x92, 0x09, 0x8d, 0x39, 0xed, 0x41, 0x40, 0x8e, 0x48, 0xea,
	0x44, 0xb4, 0x93, 0x65, 0xfb, 0x42, 0xf6, 0x84, 0x74, 0x3c, 0x2a, 0x21, 0x8f, 0xf4, 0x05, 0xe3,
	0x69, 0xac, 0xb5, 0x10, 0x8a, 0x50, 0xa8, 0xbf, 0xce, 0xf0, 0x9f, 0x7e, 0xba, 0x14, 0x0a, 0x11,
	0x76, 0xc1, 0x51, 0x96, 0xd7, 0xef, 0x38, 0x94, 0x0f, 0xb2, 0xa3, 0x34, 0xe1, 0x41, 0x1a, 0x93,
	0x1a, 0xe9, 0x51, 0xeb, 0xb8, 0x8a, 0xe6, 0xf7, 0x64, 0xb8, 0x1b, 0x03, 0x4d, 0xe0, 0xb1, 0xba,
	0x07, 0x5e, 0x44, 0x0d, 0x09, 0xdd, 0x2e, 0xc4, 0xa6, 0xd1, 0x34, 0xda, 0x33, 0xae, 0xb6, 0xf0,
	0x32, 0x9a, 0xe9, 0x00, 0x1c, 0x44, 0x74, 0x00, 0xb1, 0x59, 0x55, 0x47, 0xd3, 0x1d, 0x80, 0x67,
	0x43, 0x1b, 0x3f, 0x42, 0x0d, 0xe1, 0xbd, 0x01, 0x3f, 0x31, 0x6b, 0x4d, 0xa3, 0x3d, 0xbb, 0xb9,
	0x40, 0xd2, 0xfb, 0x90, 0xec, 0x3e, 0x64, 0x9b, 0x0f, 0x76, 0x16, 0x3f, 0x7f, 0x5c, 0xc7, 0xfb,
	0x31, 0xe5, 0xb2, 0x03, 0x31, 0xf5, 0xba, 0xf0, 0x54, 0xc5, 0xb8, 0x3a, 0x16, 0x53, 0x34, 0x15,
	0xc5, 0xcc, 0x07, 0xb3, 0xde, 0xac, 0xb5, 0x67, 0x37, 0x97, 0x88, 0xbe, 0xec, 0x10, 0x45, 0xc6,
	0x87, 0xec, 0x0a, 0xc6, 0x77, 0xee, 0x9f, 0x7c, 0x5b, 0xad, 0x1c, 0x7f, 0x5f, 0x6d, 0x87, 0x2c,
	0x79, 0xdd, 0xf7, 0x88, 0x2f, 0x7a, 0x5a, 0x99, 0xfe, 0x59, 0x97, 0xc1, 0x5b, 0x27, 0x19, 0x44,
	0x20, 0x55, 0x80, 0x74, 0xd3, 0xcc, 0xd8, 0x42, 0xd3, 0x01, 0xd0, 0xa0, 0xcb, 0x38, 0x98, 0x53,
	0x4d, 0xa3, 0x5d, 0x77, 0x73, 0x1b, 0xaf, 0x20, 0xc4, 0xe4, 0x01, 0xed, 0xfb, 0x09, 0x13, 0xdc,
	0x6c, 0x34, 0x8d, 0xf6, 0xb4, 0x3b, 0xc3, 0xe4, 0x76, 0xfa, 0xa0, 0x75, 0x0f, 0xdd, 0x19, 0x63,
	0xe5, 0x82, 0x8c, 0x04, 0x97, 0x80, 0xff, 0x47, 0x55, 0x16, 0x68, 0x5e, 0x55, 0x16, 0xb4, 0x7e,
	0x19, 0x8a, 0xeb, 0xf3, 0x28, 0xb8, 0xe0, 0x3a, 0xe6, 0x83, 0x4d, 0xf4, 0x5f, 0x5f, 0x9d, 0x67,
	0x34, 0x33, 0xb3, 0x48, 0xba, 0x36, 0x46, 0xfa, 0xa2, 0x3d, 0xf5, 0x42, 0x7b, 0x72, 0x76, 0x53,
	0xff, 0x84, 0x5d, 0xa3, 0xc8, 0xae, 0xb5, 0xa4, 0xe0, 0x8c, 0x0a, 0xce, 0xe0, 0xb4, 0x3e, 0x19,
	0xe8, 0xf6, 0x9e, 0x0c, 0xb3, 0xbe, 0xef, 0x8b, 0x6b, 0x80, 0x28, 0x65, 0x3c, 0xc8, 0x79, 0x68,
	0xeb, 0xcf, 0x38, 0x7c, 0xd4, 0xa0, 0x3d, 0xd1, 0xe7, 0xc9, 0xdf, 0x98, 0x19, 0x9d, 0xba, 0xb5,
	0x82, 0x96, 0xaf, 0x10, 0x90, 0x0b, 0x7c, 0xa1, 0x9a, 0xed, 0x42, 0xa7, 0xcf, 0x83, 0x1b, 0xd4,
	0xa6, 0x99, 0x8e, 0xe6, 0xcd, 0x4b, 0xbe, 0x44, 0x78, 0x38, 0x8b, 0xa2, 0x17, 0x75, 0x21, 0x01,
	0x3d, 0xa1, 0x37, 0x53, 0xf5, 0x2e, 0xb2, 0x2e, 0xa7, 0xce, 0x0a, 0x6f, 0x7e, 0xa9, 0xa3, 0xda,
	0x9e, 0x0c, 0x71, 0x84, 0xe6, 0x0a, 0x6f, 0x8d, 0x35, 0x72, 0xfd, 0x2b, 0x8d, 0x8c, 0xad, 0x8d,
	0xb5, 0x35, 0x81, 0x73, 0xbe, 0x63, 0x11, 0x9a, 0x2b, 0xec, 0x53, 0x59, 0xc5, 0x51, 0xe7, 0xd2,
	0x8a, 0x57, 0x0d, 0x2e, 0x7e, 0x8f, 0x6e, 0x5d, 0x1a, 0x5a, 0xa7, 0x24, 0xd1, 0x78, 0x80, 0xf5,
	0x70, 0xc2, 0x80, 0x51, 0xbd, 0x85, 0x91, 0x2a, 0xd3, 0x3b, 0xea, 0x5c, 0xaa, 0xf7, 0xaa, 0xa1,
	0xc2, 0x03, 0x34, 0x3f, 0x3e, 0x51, 0xa4, 0xac, 0x53, 0x45, 0x7f, 0xeb, 0xc1, 0x64, 0xfe, 0x59,
	0xe9, 0x9d, 0x27, 0x27, 0x3f, 0xed, 0xca, 0xc9, 0x99, 0x6d, 0x9c, 0x9e, 0xd9, 0xc6, 0x8f, 0x33,
	0xdb, 0xf8, 0x70, 0x6e, 0x57, 0x4e, 0xcf, 0xed, 0xca, 0xd7, 0x73, 0xbb, 0xf2, 0x6a, 0x6d, 0x64,
	0x63, 0x99, 0x38, 0x5c, 0x17, 0x1c, 0x9c, 0xbc, 0x8e, 0x73, 0x94, 0x7d, 0x66, 0xd5, 0xea, 0x7a,
	0x0d, 0xf5, 0xc9, 0xd9, 0xfa, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x9b, 0x55, 0x74, 0x52, 0x81, 0x07,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateEscrow defines a method for creating an escrow
	CreateEscrow(ctx context.Context, in *MsgCreateEscrow, opts ...grpc.CallOption) (*MsgCreateEscrowResponse, error)
	// UpdateEscrow defines a method for updating an escrow
	UpdateEscrow(ctx context.Context, in *MsgUpdateEscrow, opts ...grpc.CallOption) (*MsgUpdateEscrowResponse, error)
	// TransferToEscrow defines a method for a buyer to transfer funds to the escrow
	TransferToEscrow(ctx context.Context, in *MsgTransferToEscrow, opts ...grpc.CallOption) (*MsgTransferToEscrowResponse, error)
	// RefundEscrow defines a method for the seller to return the assets locked in the escrow
	RefundEscrow(ctx context.Context, in *MsgRefundEscrow, opts ...grpc.CallOption) (*MsgRefundEscrowResponse, error)
	// CompleteAuction defines a method to finish a completed auction
	CompleteAuction(ctx context.Context, in *MsgCompleteAuction, opts ...grpc.CallOption) (*MsgCompleteAuctionResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateEscrow(ctx context.Context, in *MsgCreateEscrow, opts ...grpc.CallOption) (*MsgCreateEscrowResponse, error) {
	out := new(MsgCreateEscrowResponse)
	err := c.cc.Invoke(ctx, "/starnamed.x.escrow.v1beta1.Msg/CreateEscrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateEscrow(ctx context.Context, in *MsgUpdateEscrow, opts ...grpc.CallOption) (*MsgUpdateEscrowResponse, error) {
	out := new(MsgUpdateEscrowResponse)
	err := c.cc.Invoke(ctx, "/starnamed.x.escrow.v1beta1.Msg/UpdateEscrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferToEscrow(ctx context.Context, in *MsgTransferToEscrow, opts ...grpc.CallOption) (*MsgTransferToEscrowResponse, error) {
	out := new(MsgTransferToEscrowResponse)
	err := c.cc.Invoke(ctx, "/starnamed.x.escrow.v1beta1.Msg/TransferToEscrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RefundEscrow(ctx context.Context, in *MsgRefundEscrow, opts ...grpc.CallOption) (*MsgRefundEscrowResponse, error) {
	out := new(MsgRefundEscrowResponse)
	err := c.cc.Invoke(ctx, "/starnamed.x.escrow.v1beta1.Msg/RefundEscrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CompleteAuction(ctx context.Context, in *MsgCompleteAuction, opts ...grpc.CallOption) (*MsgCompleteAuctionResponse, error) {
	out := new(MsgCompleteAuctionResponse)
	err := c.cc.Invoke(ctx, "/starnamed.x.escrow.v1beta1.Msg/CompleteAuction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateEscrow defines a method for creating an escrow
	CreateEscrow(context.Context, *MsgCreateEscrow) (*MsgCreateEscrowResponse, error)
	// UpdateEscrow defines a method for updating an escrow
	UpdateEscrow(context.Context, *MsgUpdateEscrow) (*MsgUpdateEscrowResponse, error)
	// TransferToEscrow defines a method for a buyer to transfer funds to the escrow
	TransferToEscrow(context.Context, *MsgTransferToEscrow) (*MsgTransferToEscrowResponse, error)
	// RefundEscrow defines a method for the seller to return the assets locked in the escrow
	RefundEscrow(context.Context, *MsgRefundEscrow) (*MsgRefundEscrowResponse, error)
	// CompleteAuction defines a method to finish a completed auction
	CompleteAuction(context.Context, *MsgCompleteAuction) (*MsgCompleteAuctionResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateEscrow(ctx context.Context, req *MsgCreateEscrow) (*MsgCreateEscrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEscrow not implemented")
}
func (*UnimplementedMsgServer) UpdateEscrow(ctx context.Context, req *MsgUpdateEscrow) (*MsgUpdateEscrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEscrow not implemented")
}
func (*UnimplementedMsgServer) TransferToEscrow(ctx context.Context, req *MsgTransferToEscrow) (*MsgTransferToEscrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferToEscrow not implemented")
}
func (*UnimplementedMsgServer) RefundEscrow(ctx context.Context, req *MsgRefundEscrow) (*MsgRefundEscrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundEscrow not implemented")
}
func (*UnimplementedMsgServer) CompleteAuction(ctx context.Context, req *MsgCompleteAuction) (*MsgCompleteAuctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteAuction not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateEscrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateEscrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateEscrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/starnamed.x.escrow.v1beta1.Msg/CreateEscrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateEscrow(ctx, req.(*MsgCreateEscrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateEscrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateEscrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateEscrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/starnamed.x.escrow.v1beta1.Msg/UpdateEscrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateEscrow(ctx, req.(*MsgUpdateEscrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferToEscrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferToEscrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferToEscrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/starnamed.x.escrow.v1beta1.Msg/TransferToEscrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferToEscrow(ctx, req.(*MsgTransferToEscrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RefundEscrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRefundEscrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RefundEscrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/starnamed.x.escrow.v1beta1.Msg/RefundEscrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RefundEscrow(ctx, req.(*MsgRefundEscrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CompleteAuction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCompleteAuction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CompleteAuction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/starnamed.x.escrow.v1beta1.Msg/CompleteAuction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CompleteAuction(ctx, req.(*MsgCompleteAuction))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "starnamed.x.escrow.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEscrow",
			Handler:    _Msg_CreateEscrow_Handler,
		},
		{
			MethodName: "UpdateEscrow",
			Handler:    _Msg_UpdateEscrow_Handler,
		},
		{
			MethodName: "TransferToEscrow",
			Handler:    _Msg_TransferToEscrow_Handler,
		},
		{
			MethodName: "RefundEscrow",
			Handler:    _Msg_RefundEscrow_Handler,
		},
		{
			MethodName: "CompleteAuction",
			Handler:    _Msg_CompleteAuction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iov/escrow/v1beta1/tx.proto",
}

func (m *MsgCreateEscrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateEscrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateEscrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsAuction {
		i--
		if m.IsAuction {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Deadline != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Deadline))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Price) > 0 {
		for iNdEx := len(m.Price) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Price[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateEscrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateEscrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateEscrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateEscrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateEscrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateEscrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deadline != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Deadline))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Price) > 0 {
		for iNdEx := len(m.Price) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Price[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Updater) > 0 {
		i -= len(m.Updater)
		copy(dAtA[i:], m.Updater)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Updater)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateEscrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateEscrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateEscrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTransferToEscrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferToEscrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferToEscrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferToEscrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferToEscrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferToEscrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRefundEscrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRefundEscrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRefundEscrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRefundEscrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRefundEscrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRefundEscrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCompleteAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCompleteAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCompleteAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCompleteAuctionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCompleteAuctionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCompleteAuctionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateEscrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Price) > 0 {
		for _, e := range m.Price {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Deadline != 0 {
		n += 1 + sovTx(uint64(m.Deadline))
	}
	if m.IsAuction {
		n += 2
	}
	return n
}

func (m *MsgCreateEscrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateEscrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Updater)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Price) > 0 {
		for _, e := range m.Price {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Deadline != 0 {
		n += 1 + sovTx(uint64(m.Deadline))
	}
	return n
}

func (m *MsgUpdateEscrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTransferToEscrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgTransferToEscrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRefundEscrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRefundEscrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCompleteAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCompleteAuctionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateEscrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateEscrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateEscrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &types.Any{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = append(m.Price, types1.Coin{})
			if err := m.Price[len(m.Price)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			m.Deadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deadline |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAuction", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAuction = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateEscrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateEscrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateEscrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateEscrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateEscrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateEscrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updater", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updater = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = append(m.Price, types1.Coin{})
			if err := m.Price[len(m.Price)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			m.Deadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deadline |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateEscrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateEscrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateEscrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferToEscrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferToEscrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferToEscrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types1.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferToEscrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferToEscrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferToEscrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRefundEscrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRefundEscrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRefundEscrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRefundEscrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRefundEscrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRefundEscrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCompleteAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCompleteAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCompleteAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCompleteAuctionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCompleteAuctionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCompleteAuctionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
